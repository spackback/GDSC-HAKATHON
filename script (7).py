# Create installation script and final project files

# install.py - Installation and setup script
install_script = '''#!/usr/bin/env python3
"""
Cherry AI Desktop Assistant - Installation Script
Automates the setup process for new users
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_banner():
    """Print Cherry installation banner"""
    banner = """
    üçí====================================üçí
           Cherry AI Desktop Assistant
              Installation Script
    üçí====================================üçí
    """
    print(banner)

def check_python_version():
    """Check if Python version is compatible"""
    print("üîç Checking Python version...")
    if sys.version_info < (3, 8):
        print("‚ùå Error: Python 3.8 or higher is required")
        print(f"   Current version: {sys.version}")
        return False
    else:
        print(f"‚úÖ Python {sys.version.split()[0]} - OK")
        return True

def install_requirements():
    """Install required packages"""
    print("üì¶ Installing required packages...")
    
    try:
        # Upgrade pip first
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Install requirements
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        
        print("‚úÖ All packages installed successfully")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error installing packages: {e}")
        return False

def create_directories():
    """Create necessary directories"""
    print("üìÅ Creating directories...")
    
    directories = [
        "config",
        "core", 
        "interface",
        "utils",
        "data",
        "data/memory",
        "data/cache", 
        "data/logs",
        "data/assets"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Directories created")
    return True

def setup_environment():
    """Setup environment configuration"""
    print("‚öôÔ∏è Setting up environment...")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists() and env_example.exists():
        # Copy example to .env
        with open(env_example, 'r') as src, open(env_file, 'w') as dst:
            dst.write(src.read())
        print("‚úÖ Created .env file from template")
    
    # Prompt for API key
    api_key = input("\\nüîë Enter your Gemini API Key (or press Enter to skip): ").strip()
    
    if api_key:
        # Update .env file with API key
        try:
            with open(env_file, 'r') as f:
                content = f.read()
            
            # Replace the API key line
            content = content.replace(
                "GEMINI_API_KEY=your_gemini_api_key_here",
                f"GEMINI_API_KEY={api_key}"
            )
            
            with open(env_file, 'w') as f:
                f.write(content)
            
            print("‚úÖ API key configured")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not update API key: {e}")
    else:
        print("‚ö†Ô∏è Skipped API key setup - you can add it later in .env file")
    
    return True

def check_system_requirements():
    """Check system-specific requirements"""
    print("üñ•Ô∏è Checking system requirements...")
    
    system = platform.system()
    
    if system == "Windows":
        print("‚úÖ Windows detected")
        print("‚ÑπÔ∏è Note: Cherry works best with administrator privileges on Windows")
        
    elif system == "Darwin":  # macOS
        print("‚úÖ macOS detected")
        print("‚ÑπÔ∏è Note: You may need to grant accessibility permissions to Python")
        
    elif system == "Linux":
        print("‚úÖ Linux detected")
        print("‚ÑπÔ∏è Note: You may need to install additional packages:")
        print("   sudo apt-get install espeak espeak-data libespeak1 libespeak-dev")
        print("   sudo apt-get install python3-tk python3-dev python3-xlib")
        
    else:
        print(f"‚ö†Ô∏è Unknown system: {system}")
    
    return True

def create_init_files():
    """Create __init__.py files for packages"""
    print("üìù Creating package files...")
    
    init_dirs = ["config", "core", "interface", "utils"]
    
    for directory in init_dirs:
        init_file = Path(directory) / "__init__.py"
        if not init_file.exists():
            init_file.touch()
    
    print("‚úÖ Package files created")
    return True

def test_installation():
    """Test if installation works"""
    print("üß™ Testing installation...")
    
    try:
        # Test imports
        import google.genai
        import speech_recognition
        import pyttsx3
        import pyautogui
        import pystray
        import cv2
        import chromadb
        
        print("‚úÖ All core modules can be imported")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def main():
    """Main installation function"""
    print_banner()
    
    # Installation steps
    steps = [
        ("Checking Python version", check_python_version),
        ("Creating directories", create_directories),
        ("Creating package files", create_init_files),
        ("Installing requirements", install_requirements),
        ("Setting up environment", setup_environment),
        ("Checking system requirements", check_system_requirements),
        ("Testing installation", test_installation),
    ]
    
    success_count = 0
    
    for step_name, step_function in steps:
        print(f"\\n{'='*50}")
        print(f"Step: {step_name}")
        print('='*50)
        
        if step_function():
            success_count += 1
        else:
            print(f"‚ùå Failed: {step_name}")
            break
    
    # Installation summary
    print(f"\\n{'='*50}")
    print("INSTALLATION SUMMARY")
    print('='*50)
    
    if success_count == len(steps):
        print("üéâ Installation completed successfully!")
        print("\\nüöÄ Next steps:")
        print("1. Add your Gemini API key to the .env file if you haven't already")
        print("2. Run: python main.py")
        print("3. Look for Cherry üçí in your system tray!")
        print("\\nüìñ For help, check README.md or run with --help")
        
    else:
        print(f"‚ùå Installation failed at step: {steps[success_count][0]}")
        print("\\nüîß Troubleshooting:")
        print("- Check your internet connection")
        print("- Ensure you have Python 3.8+")
        print("- Try running with admin/sudo privileges")
        print("- Check the error messages above")

if __name__ == "__main__":
    main()
'''

# Create start.bat for Windows users
start_bat = '''@echo off
echo üçí Starting Cherry AI Desktop Assistant...
echo.

REM Check if Python is available
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python not found! Please install Python 3.8+ first.
    echo Visit: https://python.org/downloads/
    pause
    exit /b 1
)

REM Check if .env exists
if not exist .env (
    echo ‚ö†Ô∏è Warning: .env file not found!
    echo Please run install.py first or create .env from .env.example
    pause
)

REM Start Cherry
echo ‚úÖ Starting Cherry...
python main.py

if errorlevel 1 (
    echo.
    echo ‚ùå Cherry encountered an error!
    echo Check the logs in data/logs/cherry.log
    pause
)
'''

# Create start.sh for Linux/macOS users
start_sh = '''#!/bin/bash
echo "üçí Starting Cherry AI Desktop Assistant..."
echo

# Check if Python is available
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 not found! Please install Python 3.8+ first."
    exit 1
fi

# Check if .env exists
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è Warning: .env file not found!"
    echo "Please run install.py first or create .env from .env.example"
fi

# Start Cherry
echo "‚úÖ Starting Cherry..."
python3 main.py

if [ $? -ne 0 ]; then
    echo
    echo "‚ùå Cherry encountered an error!"
    echo "Check the logs in data/logs/cherry.log"
    read -p "Press any key to continue..."
fi
'''

# Create quick setup guide
setup_guide = '''# üöÄ Quick Setup Guide - Cherry AI Desktop Assistant

## Option 1: Automated Installation (Recommended)

1. **Run the installer**:
   ```bash
   python install.py
   ```

2. **Follow the prompts** to:
   - Install dependencies
   - Configure API key
   - Set up directories

3. **Start Cherry**:
   - Windows: Double-click `start.bat`
   - Linux/macOS: `./start.sh` or `python3 main.py`

## Option 2: Manual Installation

1. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

2. **Setup environment**:
   ```bash
   cp .env.example .env
   ```
   Edit `.env` and add your Gemini API key

3. **Create directories**:
   ```bash
   mkdir -p data/{memory,cache,logs,assets}
   mkdir -p {config,core,interface,utils}
   ```

4. **Run Cherry**:
   ```bash
   python main.py
   ```

## Getting Your Gemini API Key

1. Visit [Google AI Studio](https://aistudio.google.com)
2. Sign in with your Google account
3. Click "Get API Key"
4. Create a new API key
5. Copy the key to your `.env` file

## First Run

1. Cherry will start in your system tray
2. Look for the üçí icon 
3. Right-click for options
4. Say "Cherry" to test voice activation
5. Use `Ctrl+Alt+C` to show the GUI

## Troubleshooting

**"Cherry doesn't start"**
- Check Python version: `python --version` (need 3.8+)
- Check API key in `.env` file
- Look at logs in `data/logs/cherry.log`

**"Voice doesn't work"**
- Check microphone permissions
- Install audio dependencies:
  - Windows: Usually included
  - Linux: `sudo apt-get install espeak espeak-data`
  - macOS: Should work out of the box

**"Screen capture fails"**
- Grant accessibility permissions (macOS)
- Run as administrator (Windows)
- Install X11 development packages (Linux)

## Need Help?

- Check `README.md` for detailed documentation
- Look at example commands in the GUI
- Check the logs for error messages
- Make sure your API key is valid

**Happy Cherry-ing! üçí**
'''

# Save all setup files
with open('install.py', 'w') as f:
    f.write(install_script)

with open('start.bat', 'w') as f:
    f.write(start_bat)

with open('start.sh', 'w') as f:
    f.write(start_sh)

with open('SETUP.md', 'w') as f:
    f.write(setup_guide)

# Make start.sh executable (on Unix systems)
try:
    import stat
    os.chmod('start.sh', stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)
except:
    pass  # Ignore on Windows

print("Created installation and setup files:")
print("‚úì install.py - Automated installation script")
print("‚úì start.bat - Windows startup script") 
print("‚úì start.sh - Linux/macOS startup script")
print("‚úì SETUP.md - Quick setup guide")

print("\n" + "="*60)
print("üçí CHERRY AI DESKTOP ASSISTANT - COMPLETE FRAMEWORK üçí")
print("="*60)

print("\nüìÅ Project Structure Created:")
project_files = [
    "main.py - Application entry point",
    "requirements.txt - Dependencies",
    ".env.example - Configuration template",
    "install.py - Automated installer",
    "start.bat / start.sh - Startup scripts",
    "README.md - Full documentation",
    "SETUP.md - Quick setup guide",
    "",
    "Core Modules:",
    "‚îú‚îÄ‚îÄ cherry_brain.py - AI processing engine", 
    "‚îú‚îÄ‚îÄ memory_manager.py - RAG and context management",
    "‚îú‚îÄ‚îÄ voice_processor.py - Speech recognition & TTS",
    "‚îú‚îÄ‚îÄ vision_system.py - Screen capture & computer vision",
    "‚îî‚îÄ‚îÄ desktop_controller.py - Mouse & keyboard automation",
    "",
    "Interface Modules:",
    "‚îú‚îÄ‚îÄ gui_manager.py - Tkinter popup interface",
    "‚îú‚îÄ‚îÄ system_tray.py - Background service",
    "‚îî‚îÄ‚îÄ hotkey_manager.py - Global hotkey detection",
    "",
    "Utility Modules:",
    "‚îú‚îÄ‚îÄ logger.py - Logging configuration", 
    "‚îú‚îÄ‚îÄ file_handler.py - File operations",
    "‚îú‚îÄ‚îÄ web_scraper.py - Web information retrieval",
    "‚îî‚îÄ‚îÄ config_settings.py - Configuration management"
]

for file_info in project_files:
    if file_info:
        if file_info.endswith(":"):
            print(f"\n{file_info}")
        else:
            print(f"  {file_info}")

print("\nüöÄ READY TO USE!")
print("1. Get your free Gemini API key at https://aistudio.google.com")
print("2. Run: python install.py") 
print("3. Run: python main.py")
print("4. Look for Cherry üçí in your system tray!")

print("\n‚ú® Features Ready:")
print("‚Ä¢ Voice activation with 'Cherry' wake word")
print("‚Ä¢ Desktop automation (mouse, keyboard, screenshots)")
print("‚Ä¢ Computer vision and screen analysis") 
print("‚Ä¢ Memory and context management with RAG")
print("‚Ä¢ Web search and information retrieval")
print("‚Ä¢ File operations and document creation")
print("‚Ä¢ System tray integration and GUI interface") 
print("‚Ä¢ Global hotkeys and voice commands")
print("‚Ä¢ Free Gemini API integration")
print("‚Ä¢ Cross-platform compatibility")

print("\nüçí Cherry AI Assistant is ready to be your intelligent desktop companion! üçí")